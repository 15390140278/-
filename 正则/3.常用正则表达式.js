//验证有效数字
/**
 * 规则分析
 * 0, +1, -1, 1.2, 1. , +- 09
 * 1.可能出现+-号，可能不出现 [+-]?
 * 2.一位0-9都可以， 多位首位不能是0 (\d|([1-9]\d+))
 * 3.小数部可能有，可能没有， 一旦有，后面必须是小数点+数字 (\.\d+)?
 */
// let reg = /^[+-]?(\d|([1-9]\d+))(\.\d+)$/

// 验证密码
/**
 * 数字，字母，下划线 6-16位
 *
 */
// let reg = /^\w{6,16}$/
// console.log(reg.test('a_232323'))
// console.log(reg.test('a232323'))
// console.log(reg.test('232323'))

// 验证真实姓名
/**
 * 1.汉字 [\u4E00-u9FA5]
 * 2.名字长度 2-10位 {2,10}
 * 3. 可能有译名 ·汉字 (·[\u4E00-u9FA5]{2,10})*
 */
// let reg = /^[\u4E00-u9FA5]{2,10}(·[\u4E00-u9FA5]{2,10})*$/

// 验证邮箱
/**
 * 1. 开头是数字，字母，下划线(1-多) ^\w+
 * 2. 开头后是-数字，字母，下划线，或者.数字，字母，下划线, 整体0-多 ((-\w+)|(\.\w+))*
 * 3. @[A-Za-z0-9]+  @qq
 * 4. ((\.|-)[A-Za-z0-9]+)*  对@后面名字的补充，多域名.com.cn, 企业邮箱 xxx@xxx-xxx-xxx.com
 * 5. \.[A-Za-z0-9]+$ @xxx.com / @xxx.cn 匹配最后的域名
 */

// let reg = /^\w+((-\w+)|(\.\w+))*@[A-Za-z0-9]((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/

// console.log(reg.test('123@qq.com'))

// 身份证号码
/**
 * 1.18位
 * 2.最后一位可能是X 代表10
 * 前六位：省市县
 * 中间八位：年月日
 * 最后四位：
 *  最后一位：X或数字
 *  倒数第二位：偶数：女 奇数：男
 *  其余两位经过算法算出来的
 */
// () 第二个作用：分组捕获 捕获大正则和小正则(括号中的正则）
let reg = /^(\d{6})(\d{4})(\d{2})(\d{2})\d{2}(\d)(\d|X)$/
console.log(reg.exec('510681199904012314'))
/**
 *[
  '510681199904012314',
  '510681',
  '1999',
  '04',
  '01',
  '1',
  '4',
  index: 0,
  input: '510681199904012314',
  groups: undefined
]
 */
